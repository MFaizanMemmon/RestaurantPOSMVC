@model RestaurantManagementUI.View_Models.GetAllOrdersViewModel
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Orders";
}

<style>
    /* =============================
           PROFESSIONAL PULSE-STYLE ICONS
           ============================= */
    td.details-control {
        cursor: pointer;
        text-align: center;
        width: 45px;
        vertical-align: middle;
    }

    .details-control i {
        font-size: 1.3rem;
        color: #6f42c1; /* Pulse accent purple */
        transition: all 0.3s ease;
        opacity: 0.85;
        background-color: #f3f0ff;
        border-radius: 50%;
        padding: 6px;
        box-shadow: 0 0 6px rgba(0, 0, 0, 0.1);
    }

    .details-control:hover i {
        transform: scale(1.15);
        opacity: 1;
        box-shadow: 0 0 10px rgba(111, 66, 193, 0.3);
    }

    tr.shown .details-control i {
        background-color: #6610f2 !important;
        color: #fff !important;
        transform: rotate(180deg) !important;
        box-shadow: 0 0 12px rgba(102, 16, 242, 0.4) !important;
    }

    /* =============================
           CHILD SLIDER ANIMATION
           ============================= */
    div.slider {
        display: none;
        overflow: hidden;
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 10px;
        transition: all 0.3s ease;
    }

    /* =============================
           INNER TABLE (CHILD)
           ============================= */
    .inner-table {
        font-size: 0.85rem;
    }

    /* Inner expandable table */
    .inner-table {
        background-color: #f8f9fa !important; /* Light gray background */
        border: 1px solid #dee2e6 !important;
        border-radius: 0.5rem !important;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1) !important;
        overflow: hidden !important;
    }

        .inner-table th {
            background-color: #e9ecef !important; /* Light Pulse secondary tone */
            color: #495057 !important;
            font-weight: 600 !important;
            border-color: #dee2e6 !important;
            text-align: center !important;
        }

        .inner-table td {
            background-color: #ffffff !important;
            color: #343a40 !important;
            border-color: #dee2e6 !important;
            padding: 0.4rem 0.6rem !important;
            vertical-align: middle !important;
        }

        .inner-table tr:hover td {
            background-color: #f1f3f5 !important; /* Subtle hover effect */
            transition: background-color 0.2s ease-in-out !important;
        }

        .inner-table .fw-bold {
            background-color: #f6f7fb !important; /* light bluish tint for total row */
            color: #0d6efd !important; /* Pulse primary blue */
        }

    /* Add subtle border glow to inner table when expanded */
    tr.shown + tr .inner-table {
        box-shadow: 0 0 6px rgba(13, 110, 253, 0.2) !important;
    }
</style>

<div class="mt-4">
    <div class="d-flex justify-content-between align-items-center mb-5">
        <h3 class="mb-0">Orders</h3>
        <a class="btn btn-primary" href="/PointOfSale/AdminPOS">
            <i class="bi bi-plus-circle me-1"></i> Add Order
        </a>
    </div>

    <table id="orderTable" class="table table-hover mt-5 dt">
        <thead>
            <tr>
                <th></th>
                <th>ID</th>
                <th>Date</th>
                <th>Time</th>
                <th>Order Type</th>
                <th>Status</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (Model?.OrderHeader != null && Model.OrderHeader.Any())
            {
                foreach (var item in Model.OrderHeader)
                {
                    <tr data-order-id="@item.MainID">
                        <td class="details-control">
                            <i class="bi bi-plus-circle-fill"></i>
                        </td>
                        <td>@item.MainID</td>
                        <td>@item.Date.ToString("dd MMM yyyy")</td>

                        @{
                            DateTime dateTime = item.Time.HasValue
                            ? DateTime.Today.Add(item.Time.Value)
                            : DateTime.Today;
                        }
                        <td>@dateTime.ToString("hh:mm tt")</td>

                        <td>@item.OrderType</td>
                        <td>
                            <span class="badge @(item.Status == "Completed"
                                ? "bg-success"
                                : item.Status == "Pending"
                                    ? "bg-warning text-dark"
                                    : "bg-secondary")">
                                @item.Status
                            </span>
                        </td>

                        <td>Rs. @item.Total.ToString("N2")</td>

                        <td>
                            <button class="btn btn-sm btn-info view-details">Edit</button>

                            <button class="btn btn-sm btn-success" onclick="openModal('Received Payment','/PointOfSale/ReceivedPayment?id=@item.MainID','md')">
                                Received Payment
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center text-muted">No orders found</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const orderDetails = @Html.Raw(JsonConvert.SerializeObject(Model.OrderDetails))

            // ✅ Initialize DataTable only once
            let table;
            if ($.fn.DataTable.isDataTable('#orderTable')) {
                table = $('#orderTable').DataTable();
            } else {
                table = $('#orderTable').DataTable({
                    paging: true,
                    ordering: true,
                    info: true,
                    columnDefs: [
                        { orderable: false, targets: 0 } // disable sort for details-control
                    ]
                });
            }

            // ✅ Expand/Collapse with fade and smooth icon animation
            $('#orderTable tbody').on('click', 'td.details-control', function () {
                const tr = $(this).closest('tr');
                const row = table.row(tr);
                const orderId = tr.data('order-id');
                const icon = $(this).find('i');

                if (row.child.isShown()) {
                    // Collapse with fade
                    $('div.slider', row.child()).fadeOut(250, function () {
                        row.child.hide();
                        tr.removeClass('shown');
                        icon.removeClass('bi-dash-circle-fill').addClass('bi-plus-circle-fill');
                    });
                } else {
                    // Expand with fade
                    const detailHtml = getOrderDetailsHtml(orderId);
                    row.child(`<div class="slider">${detailHtml}</div>`).show();
                    $('div.slider', row.child()).hide().fadeIn(300);
                    tr.addClass('shown');
                    icon.removeClass('bi-plus-circle-fill').addClass('bi-dash-circle-fill');
                }
            });

            // ✅ Child details HTML
            function getOrderDetailsHtml(orderId) {
                const filtered = orderDetails.filter(x => x.MainID === orderId);
                if (filtered.length === 0) {
                    return `<div class="text-muted text-center py-2">No details found</div>`;
                }

                let total = 0;
                let rows = '';
                filtered.forEach(d => {
                    const lineTotal = d.Qty * d.Price;
                    total += lineTotal;
                    rows += `
                        <tr>
                            <td>${d.ProductName}</td>
                            <td>${d.Qty}</td>
                            <td>Rs. ${d.Price.toFixed(2)}</td>
                            <td>Rs. ${lineTotal.toFixed(2)}</td>
                        </tr>`;
                });

                  return `
        <table class="table table-sm table-bordered mb-0 mt-2 inner-table">
            <thead>
                <tr>
                    <th>Menu</th>
                    <th>Qty</th>
                    <th>Price</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                ${rows}
                <tr class="fw-bold">
                    <td colspan="3" class="text-end">Order Amount:</td>
                    <td>Rs. ${total.toFixed(2)}</td>
                </tr>
            </tbody>
        </table>`;

            }
        });
    </script>
}
